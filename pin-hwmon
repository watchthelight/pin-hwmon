#!/usr/bin/env bash
set -euo pipefail
if [ -t 1 ]; then C_BLU="\033[1;34m"; C_GRN="\033[1;32m"; C_YEL="\033[1;33m"; C_RED="\033[1;31m"; C_RST="\033[0m"; else C_BLU=""; C_GRN=""; C_YEL=""; C_RED=""; C_RST=""; fi
log_info() { [ "${QUIET:-false}" = true ] || printf "%b[INFO]%b %s\n" "$C_BLU" "$C_RST" "$*"; }
log_ok()   { [ "${QUIET:-false}" = true ] || printf "%b[OK]%b   %s\n" "$C_GRN" "$C_RST" "$*"; }
log_warn() { printf "%b[WARN]%b %s\n" "$C_YEL" "$C_RST" "$*"; }
log_fail() { printf "%b[FAIL]%b %s\n" "$C_RED" "$C_RST" "$*"; }
DEFAULT_CPU_PATTERNS="k10temp|zenpower|coretemp"
DEFAULT_GPU_PATTERNS="amdgpu|nvidia|nouveau"
DEFAULT_NVME_PATTERNS="nvme"
DEFAULT_CPU_LABEL_PREF="Tctl,Tdie,Composite"
DEFAULT_GPU_LABEL_PREF="Junction,junction,Edge,edge"
DEFAULT_LINK_CPU="cpu"
DEFAULT_LINK_CPU_TEMP="cpu_tctl"
DEFAULT_LINK_GPU="gpu"
DEFAULT_LINK_GPU_TEMP="gpu_temp"
DEFAULT_ENABLE_NVME="false"
show_egg=true; QUIET=false; DRY_RUN=false; RELINK=true; PRINT_ONLY=false
usage() { cat <<EOF
pin-hwmon: Pin stable /etc/hwmon symlinks
Usage: pin-hwmon [--quiet] [--no-egg] [--dry-run] [--relink] [--print]
Env:
  HWMON_ROOT  Override /sys root for testing (default: /sys)
EOF
}
for arg in "$@"; do case "$arg" in -h|--help) usage; exit 0;; --quiet) QUIET=true;; --no-egg) show_egg=false;; --dry-run) DRY_RUN=true;; --relink) RELINK=true;; --print) PRINT_ONLY=true;; *) log_warn "Unknown arg: $arg"; usage; exit 2;; esac; shift || true; done
if ${show_egg}; then [ "${QUIET:-false}" = true ] || printf "\n  /\\\\  \\o/\n ( owo ) pin-hwmon\n  \\__/  ~\n\n"; fi
CONF_FILE="/etc/pin-hwmon.conf"; [ -r "$CONF_FILE" ] && . "$CONF_FILE"
CPU_PATTERNS="${CPU_PATTERNS:-$DEFAULT_CPU_PATTERNS}"; GPU_PATTERNS="${GPU_PATTERNS:-$DEFAULT_GPU_PATTERNS}"; NVME_PATTERNS="${NVME_PATTERNS:-$DEFAULT_NVME_PATTERNS}"; CPU_LABEL_PREF="${CPU_LABEL_PREF:-$DEFAULT_CPU_LABEL_PREF}"; GPU_LABEL_PREF="${GPU_LABEL_PREF:-$DEFAULT_GPU_LABEL_PREF}"; LINK_CPU="${LINK_CPU:-$DEFAULT_LINK_CPU}"; LINK_CPU_TEMP="${LINK_CPU_TEMP:-$DEFAULT_LINK_CPU_TEMP}"; LINK_GPU="${LINK_GPU:-$DEFAULT_LINK_GPU}"; LINK_GPU_TEMP="${LINK_GPU_TEMP:-$DEFAULT_LINK_GPU_TEMP}"; ENABLE_NVME="${ENABLE_NVME:-$DEFAULT_ENABLE_NVME}"
HWMON_ROOT="${HWMON_ROOT:-/sys}"; HWMON_DIR="$HWMON_ROOT/class/hwmon"; if [ "$HWMON_ROOT" != "/sys" ]; then ETC_HWMON="$HWMON_ROOT/etc/hwmon"; else ETC_HWMON="/etc/hwmon"; fi
[ -d "$HWMON_DIR" ] || { log_fail "No such directory: $HWMON_DIR"; exit 1; }
find_sensor_dir_regex() { local regex="$1" d name; for d in "$HWMON_DIR"/hwmon*; do [ -d "$d" ] || continue; [ -r "$d/name" ] || continue; name=$(tr -d '\n' <"$d/name") || true; printf '%s' "$name" | grep -Eq "^(${regex})$" && { printf '%s\n' "$d"; return 0; }; done; return 1; }
choose_temp_input_labels() { local dir="$1" labels_csv="$2" IFS=','; read -r -a labels <<<"$labels_csv"; local f v pref input; for f in "$dir"/temp*_label; do [ -f "$f" ] || continue; v=$(tr -d '\n' <"$f") || true; for pref in "${labels[@]}"; do [ "$v" = "$pref" ] || [ "${v,,}" = "${pref,,}" ] && { input=${f/_label/_input}; [ -f "$input" ] && { printf '%s\n' "$input"; return 0; }; }; done; done; for f in "$dir"/temp*_input; do [ -f "$f" ] || continue; printf '%s\n' "$f"; return 0; done; return 1; }
linkit() { local target="$1" dest="$2"; if $DRY_RUN; then log_info "DRY-RUN ln -snf $target $dest"; return 0; fi; mkdir -p "$(dirname -- "$dest")"; ln -snf "$target" "$dest"; }
cpu_dir=$(find_sensor_dir_regex "$CPU_PATTERNS" || true); [ -n "$cpu_dir" ] || { log_fail "CPU sensor not found (patterns: $CPU_PATTERNS)"; exit 3; }
cpu_input=$(choose_temp_input_labels "$cpu_dir" "$CPU_LABEL_PREF" || true); [ -n "$cpu_input" ] || { log_fail "CPU temperature input not found"; exit 4; }
gpu_dir=$(find_sensor_dir_regex "$GPU_PATTERNS" || true); if [ -n "$gpu_dir" ]; then gpu_input=$(choose_temp_input_labels "$gpu_dir" "$GPU_LABEL_PREF" || true); fi
nvme_inputs=(); if [ "${ENABLE_NVME}" = "true" ]; then for d in "$HWMON_DIR"/hwmon*; do [ -d "$d" ] || continue; [ -r "$d/name" ] || continue; n=$(tr -d '\n' <"$d/name" || true); printf '%s' "$n" | grep -Eq "^(${NVME_PATTERNS})$" || continue; inp=$(ls "$d"/temp*_input 2>/dev/null | head -n1); [ -n "$inp" ] && nvme_inputs+=("$inp"); done; fi
if $PRINT_ONLY; then printf 'cpu_dir=%s\n' "$cpu_dir"; printf 'cpu_input=%s\n' "$cpu_input"; [ -n "${gpu_dir:-}" ] && printf 'gpu_dir=%s\n' "$gpu_dir"; [ -n "${gpu_input:-}" ] && printf 'gpu_input=%s\n' "$gpu_input"; if [ "${#nvme_inputs[@]}" -gt 0 ]; then i=0; for x in "${nvme_inputs[@]}"; do printf 'nvme_input_%d=%s\n' "$i" "$x"; i=$((i+1)); done; fi; exit 0; fi
log_info "CPU dir: $cpu_dir"; log_info "CPU temp input: $cpu_input"; [ -n "${gpu_dir:-}" ] && log_info "GPU dir: $gpu_dir"; [ -n "${gpu_input:-}" ] && log_info "GPU temp input: $gpu_input"
linkit "$cpu_dir" "$ETC_HWMON/$LINK_CPU"; linkit "$cpu_input" "$ETC_HWMON/$LINK_CPU_TEMP"; [ -n "${gpu_dir:-}" ] && linkit "$gpu_dir" "$ETC_HWMON/$LINK_GPU"; [ -n "${gpu_input:-}" ] && linkit "$gpu_input" "$ETC_HWMON/$LINK_GPU_TEMP"; log_ok "Pinned symlinks under $ETC_HWMON"